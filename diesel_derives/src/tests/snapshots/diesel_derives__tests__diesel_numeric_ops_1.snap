---
source: diesel_derives/src/tests/mod.rs
expression: out
info:
  input: "#[derive(DieselNumericOps)]\nstruct NumericColumn;\n"
---
const _: () = {
    use diesel;
    use diesel::internal::derives::numeric_ops as ops;
    use diesel::expression::{Expression, AsExpression};
    use diesel::sql_types::ops::{Add, Sub, Mul, Div};
    use diesel::sql_types::{SqlType, SingleValue};
    impl<__Rhs> ::std::ops::Add<__Rhs> for NumericColumn
    where
        Self: Expression,
        Self: Expression,
        <Self as Expression>::SqlType: Add,
        <<Self as Expression>::SqlType as Add>::Rhs: SqlType + SingleValue,
        __Rhs: AsExpression<<<Self as Expression>::SqlType as Add>::Rhs>,
    {
        type Output = ops::Add<Self, __Rhs::Expression>;
        fn add(self, rhs: __Rhs) -> Self::Output {
            ops::Add::new(self, rhs.as_expression())
        }
    }
    impl<__Rhs> ::std::ops::Sub<__Rhs> for NumericColumn
    where
        Self: Expression,
        Self: Expression,
        <Self as Expression>::SqlType: Sub,
        <<Self as Expression>::SqlType as Sub>::Rhs: SqlType + SingleValue,
        __Rhs: AsExpression<<<Self as Expression>::SqlType as Sub>::Rhs>,
    {
        type Output = ops::Sub<Self, __Rhs::Expression>;
        fn sub(self, rhs: __Rhs) -> Self::Output {
            ops::Sub::new(self, rhs.as_expression())
        }
    }
    impl<__Rhs> ::std::ops::Mul<__Rhs> for NumericColumn
    where
        Self: Expression,
        Self: Expression,
        <Self as Expression>::SqlType: Mul,
        <<Self as Expression>::SqlType as Mul>::Rhs: SqlType + SingleValue,
        __Rhs: AsExpression<<<Self as Expression>::SqlType as Mul>::Rhs>,
    {
        type Output = ops::Mul<Self, __Rhs::Expression>;
        fn mul(self, rhs: __Rhs) -> Self::Output {
            ops::Mul::new(self, rhs.as_expression())
        }
    }
    impl<__Rhs> ::std::ops::Div<__Rhs> for NumericColumn
    where
        Self: Expression,
        Self: Expression,
        <Self as Expression>::SqlType: Div,
        <<Self as Expression>::SqlType as Div>::Rhs: SqlType + SingleValue,
        __Rhs: AsExpression<<<Self as Expression>::SqlType as Div>::Rhs>,
    {
        type Output = ops::Div<Self, __Rhs::Expression>;
        fn div(self, rhs: __Rhs) -> Self::Output {
            ops::Div::new(self, rhs.as_expression())
        }
    }
};
